using UnityEngine;
using System.Collections;
//including some .NET for dynamic arrays called List in C#
using System.Collections.Generic;

//directives to enforce that our parent Game Object required components
[RequireComponent(typeof(CharacterController))]
[RequireComponent(typeof(Steering))]

public class FrigateAI : MonoBehaviour
{
	public float seekPointWt = 30f;
	public float avoidObstacleWt = 50f;
	public float avoidObstacleDist = 50f;
	public float avoidEnemyWt = 25f;
	public float avoidEnemyDist = 25f;

	public float quaternionRotationSpeed = 180f;

	// Weapon mount points on ship (this is where lasers will be fired from)
	public Vector3[] weaponMountPoints;

	//Used For Firing
	public Transform laserShotPrefab;
	public AudioClip soundEffectFire;

	#region Waypoint Magic
	private float radiusX;
	private float radiusY;
	private float radiusZ;

	private float angleX;
	private float angleY;
	private float angleZ;

	//Way points for ships to follow
	private Vector3[] wayPts;

	private int wayPtIndex;
	#endregion

	// Each vehicle contains a CharacterController which
	// makes it easier to deal with the relationship between
	// movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController characterController;
	private Steering steering;
	
	//Prey Object
	public GameObject targetPrey;

	//Obstacle List (SpaceStation and Asteroids)
	private GameObject[] obstacles;

	//Saving initial max speed and max force
	private float initMaxSpd;
	private float initMaxFrc;

	// a unique identification number assigned by the flock manager 
	private int index = -1;
	public int Index {
		get { return index; }
		set { index = value; }
	}

	//movement variables
	private Vector3 moveDirection;

	//steering variable
	private Vector3 steeringForce;

	public void Start ()
	{
		//Rotates Batteries to the Left
		//for (int i = 0; i < weaponMountPoints.Length; i++)
			//weaponMountPoints[i] = RotatePointAroundPivot(weaponMountPoints[i], this.transform.position, (Quaternion.Euler(0,90,0) * Vector3.forward));

		wayPtIndex = 0;

		radiusX = Random.Range(1500f, 2000f); //Radius X
	    radiusY = Random.Range(1500f, 2000f); //Radius Y
		radiusZ = Random.Range(1500f, 2000f); //Radius Z

		angleX = Random.Range(-45f, 45f); //Rotation around X
		angleY = Random.Range(-180f, 180f); //Rotation around Y
		angleZ = Random.Range(-45f, 45f); //Rotation around Z

		wayPts = new Vector3[6]
		{
			new Vector3(Mathf.Sin(angleX)	  * radiusX, Mathf.Cos(angleY)	   * radiusY, Mathf.Sin(angleZ) 	* radiusZ),//Point 1
			new Vector3(Mathf.Sin(angleX+45)  * radiusX, Mathf.Cos(angleY+45)  * radiusY, Mathf.Sin(angleZ+45)  * radiusZ),//Point 2
			new Vector3(Mathf.Sin(angleX+90)  * radiusX, Mathf.Cos(angleY+90)  * radiusY, Mathf.Sin(angleZ+90)  * radiusZ),//Point 3
			new Vector3(Mathf.Sin(angleX+135) * radiusX, Mathf.Cos(angleY+135) * radiusY, Mathf.Sin(angleZ+135) * radiusZ),//Point 4
			new Vector3(Mathf.Sin(angleX+180) * radiusX, Mathf.Cos(angleY+180) * radiusY, Mathf.Sin(angleZ+180) * radiusZ),//Point 5
			new Vector3(Mathf.Sin(angleX+225) * radiusX, Mathf.Cos(angleY+225) * radiusY, Mathf.Sin(angleZ+225) * radiusZ),//Point 6
		};

		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		steering = gameObject.GetComponent<Steering> ();
		
		initMaxSpd = steering.maxSpeed;
		initMaxFrc = steering.maxForce;

		//Print out Waypoints
		/*
		for (int i = 0; i < wayPts.Length; i++)
		{
			Debug.Log("Waypoint[" + i + "]: " + wayPts[i]);
		}
		*/
	}

	/*
	private Vector3 RotatePointAroundPivot(Vector3 point, Vector3 pivot, Vector3 angles)
	{
		Vector3 dir = point - pivot;
		dir = Quaternion.Euler(angles)*dir;
		point = dir + pivot;
		return point;
	}
	*/

	private GameObject GetClosestObstacle ()
	{
		GameObject closest = obstacles[0];
		float closestDist = Vector3.Distance (transform.position, closest.transform.position);
		float nextDist;
		for (int i = 1; i < obstacles.Length; i++) {
			nextDist = Vector3.Distance (transform.position, obstacles[i].transform.position);
			if (nextDist < closestDist) {
				closest = obstacles[i];
				closestDist = nextDist;
			}
		}
		return closest;
	}
	
	private Vector3 SeekPt ()// Used for waypoints
	{		
		//Arrival based on position of centroidContainer's position
		//If centroid's distance < 150 to the desired waypoint, then reduce maxSpeed and maxForce
		//If not then increase speed to the initial value
		Vector3 pos = this.transform.position; /*flockManagerB.centroidContainerB*/
		
		if(Vector3.Distance(pos, wayPts[wayPtIndex]) < 145)
		{
			if(steering.maxSpeed > 40)
				steering.maxSpeed = steering.maxSpeed * 0.98f;
			
			if(steering.maxForce > 5)
				steering.maxForce = steering.maxForce * 0.96f;
		} else {
			//Reseting to original values to simulate speeding up
			steering.maxSpeed = initMaxSpd;
			steering.maxForce = initMaxFrc;
		}
			
		//Seek point if far enough away
		if(Vector3.Distance(this.transform.position, wayPts[wayPtIndex]) > 100)
			return steering.Seek(wayPts[wayPtIndex]);
		else // if close then seek next way point
		{
			if(wayPtIndex < wayPts.Length-1)
				wayPtIndex++;
			else // too keep index with range of array
				wayPtIndex = 0;

			//Open Battery Fire
			Fire();

			return Vector3.zero;
		}
	}

	private void ClampSteering ()
	{
		if (steeringForce.magnitude > steering.maxForce) {
			steeringForce.Normalize ();
			steeringForce *= steering.maxForce;
		}
	}
	
	// Update is called once per frame
	public void Update ()
	{
		CalcSteeringForce ();
		ClampSteering ();
		
		moveDirection = transform.forward * steering.Speed;
		// movedirection equals velocity
		//add acceleration
		moveDirection += steeringForce * Time.deltaTime;
		//update speed
		steering.Speed = moveDirection.magnitude;
		if (steering.Speed != moveDirection.magnitude)
			moveDirection = moveDirection.normalized * steering.Speed;
	
		//orient transform
		if (moveDirection != Vector3.zero)
			transform.forward = moveDirection;
		
		// the CharacterController moves us subject to physical constraints
		characterController.Move (moveDirection * Time.deltaTime);
	}

	private void CalcSteeringForce ()
	{
		//Steering
		steeringForce = Vector3.zero;
		steeringForce += Vector3.forward; //To reduce spinning
		steeringForce += seekPointWt * SeekPt(); //Used to calc waypoint guidance
		//steeringForce += avoidObstacleWt * steering.AvoidObstacle (GetClosestObstacle (), avoidObstacleDist);//Used to avoid Asteroids

		//Setting Target and Attack
		steeringForce += avoidEnemyWt * steering.AvoidEnemyShip(targetPrey, avoidEnemyDist);//Used to avoid Enemy Ships
		if(Vector3.Distance(targetPrey.transform.position, this.transform.position) < 100)
			Fire();
	}
	
	//Not Implemented
	private void Fire()
	{	
		foreach (Vector3 _wmp in weaponMountPoints) {
			float step = quaternionRotationSpeed * Time.deltaTime;
			Vector3 rotateVector = Vector3.RotateTowards(transform.forward, targetPrey.transform.position, step, 0.0f);
			// Calculate where the position is in world space for the mount point
			Vector3 _pos = transform.position + transform.right * _wmp.x + transform.up * _wmp.y + transform.forward * _wmp.z;
			// Instantiate the laser prefab at position with the spaceships rotation
			Transform _laserShot = (Transform) Instantiate(laserShotPrefab, _pos, transform.rotation);
			// Specify which transform it was that fired this round so we can ignore it for collision/hit
			_laserShot.GetComponent<SU_LaserShot>().firedBy = transform;
			Debug.Log("RotateVector: " + rotateVector);
			
		}
		
		// Play sound effect when firing
		if (soundEffectFire != null)
			audio.PlayOneShot(soundEffectFire);
		//Debug.Log("Pew Pew");
	}
}