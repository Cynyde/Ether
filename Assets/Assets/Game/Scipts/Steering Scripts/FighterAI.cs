using UnityEngine;
using System.Collections;
//including some .NET for dynamic arrays called List in C#
using System.Collections.Generic;

//directives to enforce that our parent Game Object required components
[RequireComponent(typeof(CharacterController))]
[RequireComponent(typeof(Steering))]

public class FighterAI : MonoBehaviour
{
	public float seekPointWt = 30f;
	public float avoidObstacleWt = 50f;
	public float avoidObstacleDist = 50f;
	public float avoidEnemyWt = 25f;
	public float avoidEnemyDist = 25f;

	public float boundingArea = 2500f;

	public float enemyFlee = 50f;
	public float enemyRange = 200f;
	public float enemyFire = 125f;
	
	// Weapon mount points on ship (this is where lasers will be fired from)
	public Vector3[] weaponMountPoints;

	//Used For Firing
	public Transform laserShotPrefab;
	public AudioClip soundEffectFire;

	//Timers
	public int pewPewTimer = 3500;
	private int decayTimer = 0;

	//Wander Point
	private Vector3 wanderPt;

	// Each vehicle contains a CharacterController which
	// makes it easier to deal with the relationship between
	// movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController characterController;
	private Steering steering;
	
	//Prey Object
	public GameObject targetPrey;

	//Obstacle List (SpaceStation and Asteroids)
	private GameObject[] obstacles;

	//Saving initial max speed and max force
	private float initMaxSpd;
	private float initMaxFrc;

	// a unique identification number assigned by the flock manager 
	private int index = -1;
	public int Index {
		get { return index; }
		set { index = value; }
	}
	
	//movement variables
	private Vector3 moveDirection;

	//steering variable
	private Vector3 steeringForce;

	public void Start ()
	{
		Wander();
		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		steering = gameObject.GetComponent<Steering> ();
		
		initMaxSpd = steering.maxSpeed;
		initMaxFrc = steering.maxForce;
	}

	private GameObject GetClosestObstacle ()
	{
		GameObject closest = obstacles[0];
		float closestDist = Vector3.Distance (transform.position, closest.transform.position);
		float nextDist;
		for (int i = 1; i < obstacles.Length; i++) {
			nextDist = Vector3.Distance (transform.position, obstacles[i].transform.position);
			if (nextDist < closestDist) {
				closest = obstacles[i];
				closestDist = nextDist;
			}
		}
		return closest;
	}
	
	private Vector3 SeekPt ()// Used for waypoints
	{
		//Either Hunt and Shoot, Flee, Bound, or Wander
		Vector3 pos = this.transform.position; //Current Position
		Vector3 targetPos = targetPrey.transform.position; //Target's Position

		if(Vector3.Distance(pos, new Vector3(0,0)) > boundingArea)//Outside Stage
			return steering.Seek(new Vector3(0,0));
		else if(Vector3.Distance(pos, targetPos) < enemyFlee)//Too Close to Target Flee
			return steering.Flee(targetPos);
		else if(Vector3.Distance(pos, targetPos) < enemyRange)//Chase Target if Close Enough
		{
			if(Vector3.Distance(pos, targetPos) < enemyFire && decayTimer <=0)//Fire if Within Range
				Fire();
			else
				decayTimer--;

			return steering.Seek(targetPos);
		}
		else //If none applym, then wander about
		{
			if(Vector3.Distance(pos, wanderPt) <= 50 || Vector3.Distance(new Vector3(0,0,0), wanderPt) > 2500)//If close to wander point then find new wander point
				Wander();
			
			return steering.Seek(wanderPt);
		}
	}

	private void ClampSteering ()
	{
		if (steeringForce.magnitude > steering.maxForce) {
			steeringForce.Normalize ();
			steeringForce *= steering.maxForce;
		}
	}
	
	// Update is called once per frame
	public void Update ()
	{
		CalcSteeringForce ();
		ClampSteering ();
		
		moveDirection = transform.forward * steering.Speed;
		// movedirection equals velocity
		//add acceleration
		moveDirection += steeringForce * Time.deltaTime;
		//update speed
		steering.Speed = moveDirection.magnitude;
		if (steering.Speed != moveDirection.magnitude)
			moveDirection = moveDirection.normalized * steering.Speed;
	
		//orient transform
		if (moveDirection != Vector3.zero)
			transform.forward = moveDirection;
		
		// the CharacterController moves us subject to physical constraints
		characterController.Move (moveDirection * Time.deltaTime);
	}

	private void CalcSteeringForce ()
	{
		//Steering
		steeringForce = Vector3.zero;
		steeringForce += Vector3.forward; //To reduce spinning
		steeringForce += seekPointWt * SeekPt(); //Used to calc waypoint guidance
		//steeringForce += avoidObstacleWt * steering.AvoidObstacle (GetClosestObstacle (), avoidObstacleDist);//Used to avoid Asteroids

		//Setting Target and Attack
		steeringForce += avoidEnemyWt * steering.AvoidEnemyShip(targetPrey, avoidEnemyDist);//Used to avoid Enemy Ships
	}

	private void Wander()
	{
		wanderPt = new Vector3(Random.Range(-2000f,2000f), Random.Range(-2000f,2000f), Random.Range(-2000f,2000f));
		//Debug.Log("Wander Vector: " + wanderPt);
	}

	//Not Implemented
	private void Fire()
	{
		//Spawn Bullet
		decayTimer = pewPewTimer;

		foreach (Vector3 _wmp in weaponMountPoints) {
			// Calculate where the position is in world space for the mount point
			Vector3 _pos = transform.position + transform.right * _wmp.x + transform.up * _wmp.y + transform.forward * _wmp.z;
			// Instantiate the laser prefab at position with the spaceships rotation
			Transform _laserShot = (Transform) Instantiate(laserShotPrefab, _pos, transform.rotation);
			// Specify which transform it was that fired this round so we can ignore it for collision/hit
			_laserShot.GetComponent<SU_LaserShot>().firedBy = transform;
			
		}

		// Play sound effect when firing
		if (soundEffectFire != null)
			audio.PlayOneShot(soundEffectFire);
		//Debug.Log("Pew Pew");
	}
}